#+TITLE: My Org-mode setup
#+AUTHOR: Matthew L. Fidler
* Simple GTD setup
For more GTD reading see:
- [[http://orgmode.org/worg/org-gtd-etc.html][Org for GTD and other Task managment systems]]

#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
#+END_SRC

Only two different org files:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        '("~/org/refile.org" "~/org/todo.org"))
#+END_SRC

Todo Keywords:

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)"  "|"  "DONE(d!)")
                            (sequence "WAIT(w@)" "|")
                            (sequence "|" "SOMEDAY(s@)")
                            (sequence "|" "CANCELED(c@)")))
  
  (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h)))
  (setq org-use-fast-todo-selection t)
  (setq org-enforce-todo-dependencies t)
#+END_SRC

Setting up org agenda column view

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-overriding-columns-format "%38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM_T{Today}" )
#+END_SRC


* Communicating with other programs -- org protocol
#+BEGIN_SRC emacs-lisp
(require 'org-protocol)
#+END_SRC

* Capture Tasks
Here is my setup for org-capture

#+begin_src emacs-lisp :tangle yes
  (when (not (file-exists-p "~/org"))
    (make-directory "~/org"))
  (setq org-default-notes-file "~/org/refile.org")
  
  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, and org-protocol
  (setq org-capture-templates
        `(("t" "todo" entry (file "~/org/refile.org")
                 "* TODO %?\n%U\n%a\n  %i" :clock-in t :clock-resume t)
                ("d" "Daily Review" plain (file+datetree "~/org/daily.org")
                 ,(format "%%[%s/five-minute.org]"
                         (expand-file-name "etc"
                                           emacsmate-dir)) :clock-in t :clock-resume t)
                ("k" "Weekly Review" plain (file+datetree "~/org/weekly.org")
                 ,(format "%%[%s/gtd-weekly.org]"
                         (expand-file-name "etc"
                                           emacsmate-dir))
                 :clock-in t :clock-resume t)
                ("n" "note" entry (file "~/org/refile.org")
                 "* %? :NOTE:\n%U\n%a\n  %i" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree "~/org/diary.org")
                 "* %?\n%U\n  %i" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file "~/org/refile.org")
                 "* TODO Review %c\n%U\n  %i" :immediate-finish t)
                ("o" "org-outlook" entry (file "~/org/refile.org") "* TODO Email %c %?\n  %i\n %U"
                 :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/org/refile.org")
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n  %i")))
  
  (emacsmate-m "Org Templates")
  
#+end_src

The =%i= in the templates inserts any text in the kill ring as part of
the capture task.  This is intentionally indented from the rest of the
capture task details so that I can include text that starts with '* '
in column 1 without generating a new headline.

Capture mode now handles automatically clocking in and out of a
capture task.  This all works out of the box now without special hooks.
When I start a capture mode task the task is clocked in as specified
by =:clock-in t= and when the task is filed with =C-c C-c= the clock 
resumes on the original clocking task.

* Org-mode options
** Code Blocks
Org-babel currently supported languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (R . t)
     (plantuml . t)
     (perl . t)
     (ruby . t)
     (python . t)
     (js . t)
     (haskell . t)
     (clojure . t)
     (ditaa . t)))
  
  (setq org-confirm-babel-evaluate nil)
  
#+END_SRC

Reading/Editing code inside org-mode code-blocks is much more like
reading and editing of code using its major mode.  Currently disabled
since it makes org-mode laggy for me...

#+BEGIN_SRC emacs-lisp
  (when nil
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t))
#+END_SRC


** Handling blank lines

Blank lines are evil :).  They keep getting inserted in between
headlines and I don't want to see them in collapsed (contents) views.
When I use =TAB= to fold (cycle) tasks I don't want to see any blank
lines but the default =org-cycle-separate-lines= setting hides single
blank lines and reveals where extra empty lines are created in the
document.  I'd rather not see blank lines at all in collapsed views.

The following setting hides all blank lines inside folded contents of
headings:

#+begin_src emacs-lisp :tangle yes
  (setq org-cycle-separator-lines 0)
#+end_src

I find extra blank lines in lists and headings a bit of a nuisance.
To get a body after a list you need to include a blank line between
the list entry and the body -- and indent the body appropriately.
Most of my lists have no body detail so I like the look of collapsed
lists with no blank lines better.

The following setting prevents creating blank lines before list items
and headings:

#+begin_src emacs-lisp :tangle yes
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item))))
#+end_src
** Org mode display image files
CLOSED: [2011-12-16 Fri 16:59]
- State "DONE"       from "STARTED"    [2011-12-16 Fri 16:59]
:LOGBOOK:
CLOCK: [2011-12-16 Fri 16:58]--[2011-12-16 Fri 16:59] =>  0:01
CLOCK: [2011-12-16 Fri 16:45]--[2011-12-16 Fri 16:58] =>  0:13
:END:
Using iimage mode, See [[http://orgmode.org/worg/org-configs/org-config-examples.html#sec-2-2][iimage in org]].
- iimage 
#+BEGIN_SRC emacs-lisp
  (require 'iimage)
  (add-to-list 'iimage-mode-image-regex-alist
               (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex
                             "\\)\\]")  1))
  
  (defun org-toggle-iimage-in-org ()
    "display images in your org file"
    (interactive)
    (if (face-underline-p 'org-link)
        (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
    (iimage-mode))
  (add-hook 'org-mode-hook 'org-toggle-iimage-in-org)
  
#+END_SRC


** Edit code in a single window
I use =C-s= to save all the time.  The default org-mode editing
mechanism changes my window position :(.  Therefore, I prefer to edit
the org-mode files in the current window.
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  
#+END_SRC

** Let =C-w= exit the source code view
#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map "\C-w" 'org-edit-src-exit)
#+END_SRC

** Over the top Saving of Org-buffers.
   I would like refile to save the buffer
#+BEGIN_SRC emacs-lisp
(add-hook 'org-after-refile-insert-hook 'save-buffer)
(add-hook 'org-capture-after-finalize-hook 'save-buffer)
(defadvice org-refile (around save-after-refile)
  ad-do-it
  (save-buffer))
(ad-activate 'org-refile)
#+END_SRC


** Org Options
#+BEGIN_SRC emacs-lisp
  (emacsmate-m "Org Options") 
#+END_SRC
 


* Org Export
I would like to produce =doc= files, this is done by changing the
=org-export-odt-preferred-output-format= in conjunction with
LibreOffice.

#+BEGIN_SRC emacs-lisp
  (setq org-export-odt-preferred-output-format "doc")
#+END_SRC
